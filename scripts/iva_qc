#!/usr/bin/env python3

import argparse
import os
import sys
import iva

parser = argparse.ArgumentParser(
    description = 'IVA QC. Version: ' + iva.common.version,
    usage = '%(prog)s [options] <ref.fasta> <ref.gff> <prefix of output files>',
    epilog = 'You must supply reads in one of three ways: 1) both --reads_fwd and --reads_rev; 2) --fr; 3) both --assembly_bam and --ref_bam',
)

parser.add_argument('assembly_fasta', action=iva.common.abspathAction, help='Name of assembly fasta file to be compared to reference', metavar='assembly.fasta')
parser.add_argument('ref_fasta', action=iva.common.abspathAction, help='Name of reference fasta file that assembly will be compared against', metavar='ref.fasta')
parser.add_argument('ref_gff', action=iva.common.abspathAction, help='Name of reference gff file that has CDSs annotated to look for in the assembly', metavar='ref.gff[.gz]')
parser.add_argument('output_prefix', help='Prefix to use for name of all output files', metavar='prefix of output files')

reads_group = parser.add_argument_group('Reads options')
reads_group.add_argument('-f', '--reads_fwd', action=iva.common.abspathAction, help='Name of forwards reads fasta or fastq file. Must be used with --reads_rev', metavar='filename[.gz]')
reads_group.add_argument('-r', '--reads_rev', action=iva.common.abspathAction, help='Name of reverse reads fasta or fastq file. Must be used with --reads_rev', metavar='filename[.gz]')
reads_group.add_argument('--fr', action=iva.common.abspathAction, dest='reads_fr', help='Name of interleaved fasta/q file', metavar='filename[.gz]')
reads_group.add_argument('--ref_bam', action=iva.common.abspathAction, help='Name of sorted indexed BAM file of reads mapped to reference fasta. Must be used with --assembly_bam', metavar='filename')
reads_group.add_argument('--assembly_bam', action=iva.common.abspathAction, help='Name of sorted indexed BAM file of reads mapped to assembly fasta. Must be used with --ref_bam', metavar='filename')


mummer_group = parser.add_argument_group('MUMmer options')
mummer_group.add_argument('--cds_min_hit_length', type=int, help='Minimum hit length when running nucmer of CDS sequences against contigs [%(default)s]', metavar='INT', default=30)
mummer_group.add_argument('--cds_min_hit_id', type=float, help='Minimum hit percent identity when running nucmer of CDS sequences against contigs [%(default)s]', metavar='FLOAT', default=80)
mummer_group.add_argument('--ctg_min_hit_length', type=int, help='Minimum hit length when running nucmer of contigs against reference [%(default)s]', metavar='INT', default=100)
mummer_group.add_argument('--ctg_min_hit_id', type=float, help='Minimum hit percent identity when running nucmer of contigs against reference [%(default)s]', metavar='FLOAT', default=95)


mapping_group = parser.add_argument_group('SMALT mapping options')
mapping_group.add_argument('-k', '--smalt_k', type=int, help='kmer hash length in SMALT (the -k option in smalt index) [%(default)s]', default=15, metavar='INT')
mapping_group.add_argument('-s', '--smalt_s', type=int, help='kmer hash step size in SMALT (the -s option in smalt index) [%(default)s]', default=3, metavar='INT')
mapping_group.add_argument('-y', '--smalt_id', type=float, help='Minimum identity threshold for mapping to be reported (the -y option in smalt map) [%(default)s]', default=0.5, metavar='FLOAT')


external_group = parser.add_argument_group('External tools')
external_group.add_argument('--gage', help='Path to directory of gage scripts, i.e. getCorrectnessStats.sh. If you use this option, gage results will also be reported', metavar='Directory')
external_group.add_argument('--ratt_embl', help='Path to directory of embl files, to be used as a reference to run RATT. RATT is only run if this option is used', metavar='Directory')
external_group.add_argument('--ratt_config', help='Specify your own RATT config file', metavar='Directory')

other_group = parser.add_argument_group('Other options')
other_group.add_argument('--ctg_layout_plot_title', help='Title to use in contig layout plot [%(default)s]', default='IVA QC contig layout and read depth', metavar='STRING')
other_group.add_argument('--min_ref_cov', help='Minimum read coverage of the reference, on each strand, to count as OK coverage [%(default)s]', default=5, metavar='INT')
other_group.add_argument('--threads', type=int, help='Number of threads to use [%(default)s]', default=1, metavar='INT')



options = parser.parse_args()


qc = iva.qc.Qc(
    options.ref_fasta,
    options.ref_gff,
    options.assembly_fasta,
    options.output_prefix,
    reads_fwd=options.reads_rev,
    reads_rev=options.reads_fwd,
    reads_fr=options.reads_fr,
    assembly_bam=options.assembly_bam,
    ref_bam=options.ref_bam,
    nucmer_min_cds_hit_length=options.cds_min_hit_length,
    nucmer_min_cds_hit_id=options.cds_min_hit_id,
    nucmer_min_ctg_hit_length=options.ctg_min_hit_length,
    nucmer_min_ctg_hit_id=options.ctg_min_hit_id,
    smalt_k=options.smalt_k,
    smalt_s=options.smalt_s,
    smalt_id=options.smalt_id,
    min_ref_cov=options.min_ref_cov,
    contig_layout_plot_title=options.ctg_layout_plot_title,
    threads=options.threads,
    gage=options.gage,
    ratt_embl=options.ratt_embl,
    ratt_config=options.ratt_config,
)

qc.run()
